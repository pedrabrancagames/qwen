/**\n * Rankings Manager - Ghostbusters AR\n * Gerencia o sistema de rankings dos jogadores\n */\n\nimport { ref, get, query, orderByChild, limitToFirst } from \"https://www.gstatic.com/firebasejs/10.12.2/firebase-database.js\";\n\nexport class RankingsManager {\n    constructor(gameManager) {\n        this.gameManager = gameManager;\n        this.database = gameManager.database;\n        this.rankingsModal = null;\n        this.rankingsList = null;\n        this.closeRankingsButton = null;\n    }\n\n    // Inicializa elementos da interface de rankings\n    initializeRankingsElements() {\n        // Criar modal de rankings\n        const rankingsModal = document.createElement('div');\n        rankingsModal.id = 'rankings-modal';\n        rankingsModal.className = 'ui-screen ui-element hidden';\n        rankingsModal.innerHTML = `\n            <div id=\"rankings-content\">\n                <div id=\"rankings-header\">\n                    <h2>Ranking de Caçadores</h2>\n                    <button id=\"close-rankings-button\" class=\"ui-element\">&times;</button>\n                </div>\n                <ul id=\"rankings-list\"></ul>\n            </div>\n        `;\n        \n        // Adicionar ao container da UI\n        document.getElementById('ui-container').appendChild(rankingsModal);\n        \n        // Referenciar elementos\n        this.rankingsModal = document.getElementById('rankings-modal');\n        this.rankingsList = document.getElementById('rankings-list');\n        this.closeRankingsButton = document.getElementById('close-rankings-button');\n        \n        // Adicionar event listeners\n        this.closeRankingsButton.addEventListener('click', () => this.hideRankings());\n    }\n\n    // Mostra o modal de rankings\n    showRankings() {\n        this.rankingsModal.classList.remove('hidden');\n        this.loadRankings();\n    }\n\n    // Esconde o modal de rankings\n    hideRankings() {\n        this.rankingsModal.classList.add('hidden');\n    }\n\n    // Carrega e exibe os rankings\n    async loadRankings() {\n        try {\n            // Mostrar loading\n            this.rankingsList.innerHTML = '<li>Carregando rankings...</li>';\n            \n            // Consultar os 10 melhores jogadores ordenados por pontos\n            const usersRef = ref(this.database, 'users');\n            const rankingsQuery = query(usersRef, orderByChild('points'), limitToFirst(10));\n            \n            const snapshot = await get(rankingsQuery);\n            \n            if (snapshot.exists()) {\n                // Converter os dados para um array\n                const users = [];\n                snapshot.forEach((childSnapshot) => {\n                    const userData = childSnapshot.val();\n                    users.push({\n                        key: childSnapshot.key,\n                        displayName: userData.displayName || 'Caça-Fantasma',\n                        points: userData.points || 0,\n                        captures: userData.captures || 0\n                    });\n                });\n                \n                // Ordenar por pontos (decrescente)\n                users.sort((a, b) => b.points - a.points);\n                \n                // Exibir os rankings\n                this.displayRankings(users);\n            } else {\n                this.rankingsList.innerHTML = '<li>Nenhum jogador encontrado.</li>';\n            }\n        } catch (error) {\n            console.error(\"Erro ao carregar rankings:\", error);\n            this.rankingsList.innerHTML = '<li>Erro ao carregar rankings.</li>';\n        }\n    }\n\n    // Exibe os rankings na interface\n    displayRankings(users) {\n        this.rankingsList.innerHTML = '';\n        \n        if (users.length === 0) {\n            this.rankingsList.innerHTML = '<li>Nenhum jogador encontrado.</li>';\n            return;\n        }\n        \n        users.forEach((user, index) => {\n            const li = document.createElement('li');\n            li.className = 'ranking-item';\n            \n            // Destacar o usuário atual\n            const isCurrentUser = this.gameManager.currentUser && user.key === this.gameManager.currentUser.uid;\n            if (isCurrentUser) {\n                li.classList.add('current-user');\n            }\n            \n            li.innerHTML = `\n                <span class=\"ranking-position\">${index + 1}.</span>\n                <span class=\"ranking-name\">${user.displayName}</span>\n                <span class=\"ranking-points\">${user.points} pts</span>\n                <span class=\"ranking-captures\">(${user.captures} capturas)</span>\n            `;\n            \n            this.rankingsList.appendChild(li);\n        });\n    }\n}